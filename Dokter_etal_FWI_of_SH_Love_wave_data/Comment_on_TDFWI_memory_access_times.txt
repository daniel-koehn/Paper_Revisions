During the development of our time-domain FWI code in 2007 we decided to store the down-sampled 
forward wavefield in RAM instead of the hard drive. One problem was the large memory access time, 
when storing the wavefields in 3D arrays, which where defined as an array of an array of pointers. 
This 3D array definition leads to potentially fragmented memory blocks. On the other hand a simple 
1D array is a single block of memory with significantly reduced access time. As a minimum example 
we added two small C-codes, which simulate extensive memory accesses, similar to the one in the CTS
test problem, using either a 1D or 3D array defined by an array of array of pointers. The
average run time using the 1D array implementation on 1 core of an Intel Xeon E5-2670
CPUs (2.6 GHz) with 128 GB DDR4 RAM on our NEC-cluster at the computing center
of Kiel university, is 48.6 s. For comparison the implementation with the 3D pointer array
requires a runtime of 83.7 s. Back in 2007 the difference in memory access time was even
larger, due to a very slow connection between the CPU and RAM compared to the amount
of memory required to store the downsampled wavefield for 2D elastic FWI. Based on the suggestions 
of Reviewer 2, I again looked a little bit deeper into the problem and realized that it
might be not relevant anymore. Even when using very moderate compiler optimization
options like -O2, the runtime of both codes reduces to approximately 12 s. While such a
performance boost by simple compiler optimization could not be achieved back in 2007, it
seem to be not a problem anymore.